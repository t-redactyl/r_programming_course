setws("C:/Users/Jodie/Dropbox/Thesis FINAL DRAFTS/Data sets under use/Study 1")
load("C:/Users/Jodie/Dropbox/Thesis FINAL DRAFTS/Data sets under use/Study 1/MLM play workspace, R.RData")
fix(addRandomSlope)
fix(finalModel)
finalModel
eventmatrix <- cbind(Hu_v_RD, Ag_v_RD, IF_v_RD, IH_v_RD, MI_v_RD, Di_v_RD)
eventmatrix
eventmatrix5 <- cbind(Hu_v_RD, Ag_v_RD, IF_v_RD, MI_v_RD)
eventmatrix5
Hu_v_RD5 <- c(1, 0, 0, 0, -1)
Ag_v_RD5 <- c(0, 1, 0, 0, -1)
IF_v_RD5 <- c(0, 0, 1, 0, -1)
MI_v_RD5 <- c(0, 0, 0, 1, -1)
eventmatrix5 <- cbind(Hu_v_RD5, Ag_v_RD5, IF_v_RD5, MI_v_RD5)
eventmatrix5
hurtModel1 <- lme (ahurtat ~ aimpord + eventmatrix5 + aHPS_ctrd + aimpord:eventmatrix5 + aimpord:aHPS_ctrd + eventmatrix5:aHPS_ctrd + aimpord:eventmatrix5:aHPS_ctrd, data = study1Data, random = ~aimpord:eventmatrix5:aHPS_ctrd|arellvl, method = ML)
install.packages("car"); install.packages("ggplot2"); install.packages("nlme"); install.packages("reshape")
library(car); library(ggplot2); library(nlme); library(reshape)
hurtModel1 <- lme(ahurtat ~ aimpord + eventmatrix5 + aHPS_ctrd + aimpord:eventmatrix5 + aimpord:aHPS_ctrd + eventmatrix5:aHPS_ctrd + aimpord:eventmatrix5:aHPS_ctrd, data = study1Data, random = ~aimpord:eventmatrix5:aHPS_ctrd|arellvl, method = ML)
hurtModel1 <- lme(ahurtat ~ aimpord + eventmatrix5 + aHPS_ctrd + aimpord:eventmatrix5 + aimpord:aHPS_ctrd + eventmatrix5:aHPS_ctrd + aimpord:eventmatrix5:aHPS_ctrd, data = study1Data, random = ~aimpord:eventmatrix5:aHPS_ctrd|arellvl, method = "ML")
model1 <- lm(ahurtat~eventmatrix5, data=study1Data)
load("C:/Users/Jodie/Dropbox/Thesis FINAL DRAFTS/Data sets under use/Study 1/.RData")
load("C:/Users/Jodie/Dropbox/Thesis FINAL DRAFTS/Data sets under use/Study 1/MLM play workspace, R.RData")
hurtModel1 <- lm(ahurtat ~ eventmatrix)
hurtModel1 <- lm(ahurtat ~ eventmatrix, data = study1Data)
contrasts(study1Data$atoe7) <- cbind(Hu_v_RD5, Ag_v_RD5, IF_v_RD5, MI_v_RD5)
contrasts(study1Data$atoe7)<-contr.treatment(7, base = 1)
event1 = factor(study1Data$atoe7, labels=c("Relational denigration", "Humiliation", "Aggression", "Intrinsic flaw", "Ill-conceived humour", "Mistaken intent", "Discouragement"))
event 1
event1
contrasts(study1Data$event1)<-contr.treatment(7, base = 1)
contrasts(study1Data$event1)<-cbind(Hu_v_RD, Ag_v_RD, IF_v_RD, IH_v_RD, MI_v_RD, Di_v_RD)
atoe7.f <- factor(study1Data$atoe7, labels=c("Relational denigration", "Humiliation", "Aggression", "Intrinsic flaw", "Ill-conceived humour", "Mistaken intent", "Discouragement"))
atoe7.f
tapply(study1Data$atoe7, atoe7.f, mean)
contrasts(study1Data$atoe7)<-contr.treatment(7, base = 1)
contrasts(atoe7.f)<-contr.treatment(7, base = 1)
atoe7.f
atoe7.f5 <- factor(study1Data$atoe7, labels=c("Relational denigration", "Humiliation", "Aggression", "Intrinsic flaw", "Ill-conceived humour", "Mistaken intent", "Discouragement"))
atoe7.f7 <- factor(study1Data$atoe7, labels=c("Relational denigration", "Humiliation", "Aggression", "Intrinsic flaw", "Ill-conceived humour", "Mistaken intent", "Discouragement"))
contrasts(atoe7.f7)<-cbind(Hu_v_RD, Ag_v_RD, IF_v_RD, IH_v_RD, MI_v_RD, Di_v_RD)
atoe7.f7
contrasts(atoe7.f5)<-cbind(Hu_v_RD5, Ag_v_RD5, IF_v_RD5, MI_v_RD5)
install.packages("WRS", repos="http://R-Forge.R-project.org")
library(WRS)
hurtrlog <- log10(study1Data$ahurtat)
hurtrlog
hurtrlogHist <- ggplot(study1Data, aes(hurtrlog)) + opts(legend.position = "none")
hurtrlogHist <- ggplot(study1Data, aes(hurtrlog))
hurtrlogHist + geom_histogram()
hurtrlog <- log10(8-study1Data$ahurtat)
hurtrlogHist <- ggplot(study1Data, aes(hurtrlog))
hurtrlogHist + geom_histogram()
hurtri <- (1/(8-study1Data$ahurtat))
hurtriHist <- ggplot(study1Data, aes(hurtri))
hurtriHist + geom_histogram()
hurtcub <-(ahurtat)^3
hurtcubic<-(study1Data$ahurtat)^3
hurtcubHist<-ggplot(study1Data, aes(hurtcubic))
hurtcubHist + geom_histogram()
hurtModelN <- lme(ahurtat ~ aimpord + atoe7.f7 + aHPS_ctrd + aimpord:atoe7.f7 + aimpord:aHPS_ctrd + atoe7.f7:aHPS_ctrd + aimpord:atoe7.f7:aHPS_ctrd, data=study1Data, random = ~ |arellvl, method = "ML")
fixedint <- (aimpord*atoeD1*atoeD2*atoeD3*atoeD4*atoeD5*atoeD6*atoeD7*aHPS_ctrd)
fixedint <- (aimpord*atoeD1*atoeD2*atoeD3*atoeD4*atoeD5*atoeD6*atoeD7*aHPS_ctrd)
hurtsqrt <- sqrt(ahurtat)
hurtsqrt <- sqrt(study1Data$ahurtat)
hurtsqrtHist <- ggplot(study1Data, aes(hurtsqrt))
hurtsqrtHist + geom_histogram()
hurtsqrt <- sqrt(8-study1Data$ahurtat)
hurtsqrtHist <- ggplot(study1Data, aes(hurtsqrt))
hurtsqrtHist + geom_histogram()
fixedint <- (aimpord*atoeD1*atoeD2*atoeD3*atoeD4*atoeD5*atoeD6*atoeD7*aHPS_ctrd, data=study1Data)
fixedint <- (study1Data$aimpord*study1Data$atoeD1*study1Data$atoeD2*study1Data$atoeD3*study1Data$atoeD4*study1Data$atoeD5*study1Data$atoeD6*study1Data$atoeD7*study1Data$aHPS_ctrd)
hurtMNormal <- lme(ahurtat ~ aimpord + atoe7.f7 + aHPS_ctrd + aimpord:atoe7.f7 + aimpord:aHPS_ctrd + atoe7.f7:aHPS_ctrd + aimpord:atoe7.f7:aHPS_ctrd, data=study1Data, random = ~fixedint|arellvl, method = "ML")
hurtMNormal <- lme(ahurtat ~ aimpord + atoe7.f7 + aHPS_ctrd + aimpord:atoe7.f7 + aimpord:aHPS_ctrd + atoe7.f7:aHPS_ctrd + aimpord:atoe7.f7:aHPS_ctrd, data=study1Data, random = ~aimpord|arellvl, method = "ML")
hurtMNormal <- lm(ahurtat ~ atoe7.f7, data=study1Data)
hurtMNormal
hurtMNormal <- lme(ahurtat~aimpord + atoe7.f7 + aHPS_ctrd, data=study1Data, random=~1|arellvl, method="ML")
hurtMNormal
hurtMNormal <- lme(ahurtat~aimpord + atoe7.f7 + aHPS_ctrd, data=study1Data, random=~fixint|arellvl, method="ML")
hurtMNormal <- lme(ahurtat~aimpord + atoe7.f7 + aHPS_ctrd, data=study1Data, random=~aimpord|arellvl, method="ML")
hurtMNormal
hurtMNormal <- lme(ahurtat~aimpord + atoe7.f7 + aHPS_ctrd, data=study1Data, random=~atoe7.f7|arellvl, method="ML")
hurtMNormal
save.image("C:/Users/Jodie/Dropbox/Thesis FINAL DRAFTS/Data sets under use/Study 1/MLM play workspace, R.RData")
load("C:/Users/Jodie/Dropbox/Thesis FINAL DRAFTS/Data sets under use/Study 1/MLM play workspace, R.RData")
hurtMNormal
hurtMrlog <- lme(hurtrlog~aimpord + atoe7.f7 + aHPS_ctrd, data=study1Data, random=~atoe7.f7|arellvl, method="ML")
install.packages(ggplot2)
install.packages("ggplot2")
library(ggplot2)
matrix(0, 80, 80)
mountain <- 1:100
dim(mountain) <- c(25, 4)
mountain
persp(mountain)
persp(mountain, expand=0.2)
image(mountain)
volcano
persp(volcano, expand=0.2)
help(persp)
contour(volcano)
image(volcano)
help(persp)
persp(volcano, expand=0.2, shade=0.5)
par(bg = "white")
x <- seq(-1.95, 1.95, length = 30)
y <- seq(-1.95, 1.95, length = 35)
z <- outer(x, y, function(a,b) a*b^2)
nrz <- nrow(z)
ncz <- ncol(z)
# Create a function interpolating colors in the range of specified colors
jet.colors <- colorRampPalette( c("blue", "green") )
# Generate the desired number of colors from this palette
nbcol <- 100
color <- jet.colors(nbcol)
# Compute the z-value at the facet centres
zfacet <- z[-1, -1] + z[-1, -ncz] + z[-nrz, -1] + z[-nrz, -ncz]
# Recode facet z-values into color indices
facetcol <- cut(zfacet, nbcol)
persp(x, y, z, col=color[facetcol], phi=30, theta=-30)
par(op)
z <- 2 * volcano        # Exaggerate the relief
x <- 10 * (1:nrow(z))   # 10 meter spacing (S to N)
y <- 10 * (1:ncol(z))   # 10 meter spacing (E to W)
## Don't draw the grid lines :  border = NA
par(bg = "slategray")
persp(x, y, z, theta = 135, phi = 30, col = "green3", scale = FALSE,
ltheta = -120, shade = 0.75, border = NA, box = FALSE
x <- c(1:20)
if (x > 1) {
print ("x is big")
} else if (x > 0) {
print ("x is positive")
} else {
print ("x is negative or zero")
}
z <- 5
while (z >= 3 && z <= 10) {
print(z)
coin <- rbinom(1, 1, 0.5)
if (coin == 1) {
z <- z + 1
} else {
z <- z - 1
}
}
arg(quantile)
args(quantile)
help(quantile)
x <- list(nrorm(100), runif(100), rpois(100, 1))
x <- list(rnorm(100), runif(100), rpois(100, 1))
sapply(x, quantile, probs = c(0.25, 0.75))
lapply(x, quantile, probs = c(0.25, 0.75))
x <- list(a = rnorm(100), b = runif(100), c = rpois(100, 1))
lapply(x, quantile, probs = c(0.25, 0.75))
sapply(x, quantile, probs = c(0.25, 0.75))
help(array)
help(matrix)
x <- matrix(nrow = 100, ncol = 10)
f <- gl(4, 25)
split(x, f)
x <- matrix(1:100, nrow = 100, ncol = 10)
f <- gl(4, 25)
split(x, f)
cube <- function(y, n) {
x^3
}
cube(3)
cube <- function(x, n) {
x^3
}
cube(3)
pow <- function(x = 4, n = 3) {
x^n
}
pow()
x <- 1:10
if(x > 5) {
x <- 0
}
library(iris)
library(datasets)
data(iris)
?iris
sapply(iris$Sepal.Length, mean)
iris
s <- split(iris, iris$Species)
sapply(s, function(x) colMeans(x[, "Sepal.Length"]))
sapply(s, colMeans("Sepal.Length"))
tapply(iris$Sepal.Length, iris$Sepal.Length, mean)
tapply(iris$Sepal.Length, iris$Sepal.Length, colMean)
tapply(iris$Sepal.Length, iris$Species, mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
209.21429-82.63636
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
z <- 10
f(3)
z <- 10
f(3)
z <- 10
f(3)
?iris
break
citation()
load("C:/Users/Jodie/Dropbox/Thesis FINAL DRAFTS/Data sets under use/Study 2/MLM workspace Ch 5.RData")
source('http://openmx.psyc.virginia.edu/getOpenMx.R')
install.packages(OpenMx)
update.packages()
setwd("C:\Users\Jodie\R Programming, Coursera")
setwd("C:/Users/Jodie/R Programming, Coursera")
x <- 4L
class(x)
x <- c(4, TRUE)
class(x)
x <- c(1, 3, 5)
y <- c(3, 2, 10)
cbind(x, y)
x <- list(2, "a", "b", TRUE)
x[[2]]
x <- 1:4
y <- 2
x + y
data <- read.csv("hw1_data.csv")
x <- c(17, 14, 4, 5, 13, 12, 10)
x[x > 10] <- 4
x
View(data)
data[1:2, ]
View(data)
View(data)
?data.frame
attributes(data)
data[152:153, ]
missing <- is.na(data$ozone)
missing <- is.na(data$Ozone)
attributes(missing)
table(missing)
data$ozone[47, ]
data[47, 1]
View(data)
ozoneNoNa <- data$Ozone[!missing]
153-37
summary(ozoneNoNa)
sapply(mydata$Ozone, mean, na.rm=TRUE)
sapply(data$Ozone, mean, na.rm=TRUE)
subset <- data[Ozone > 31 & Temp > 90]
subset <- data[data$Ozone > 31 & data$Temp > 90]
subset <- data[data$Ozone > 31 & data$Temp > 90, ]
View(subset)
?summary
complete.cases(data$Solar.R)
complete.cases(subset$Solar.R)
sapply(subset, mean, na.rm=TRUE)
sapply(data[Month == 6], mean, na.rm=T)
sapply(data[data$Month == 6], mean, na.rm=T)
sapply(data[data$Month == 6, ], mean, na.rm=T)
?sapplu
?sapply
sapply(data[data$Month == 5, ], max, na.rm=T)
x <- 4
class(x)
x <- c(4, "a", TRUE)
class(x)
x <- list(2, "a", "b", TRUE)
x[[1]]
data[1:2, ]
data[152:153, ]
data[47, 1]
missing <- is.na(data$Ozone)
table(missing)
ozoneNoNa <- data$Ozone[!missing]
summary(ozoneNoNa)
subset <- data[data$Ozone > 31 & data$Temp > 90, ]
complete.cases(subset$Solar.R)
sapply(subset, mean, na.rm=TRUE)
sapply(data[data$Month == 6, ], mean, na.rm=T)
sapply(data[data$Month == 5, ], max, na.rm=T)
R.version.string
update
if(!require(installr)) {
install.packages("installr"); require(installr)} #load / install+load installr
updateR()
